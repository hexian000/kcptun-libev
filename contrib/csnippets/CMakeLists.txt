add_library(csnippets STATIC)
target_include_directories(csnippets BEFORE PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
target_compile_options(csnippets PUBLIC "-include${CMAKE_CURRENT_BINARY_DIR}/config.h")
target_compile_options(csnippets PRIVATE -pedantic -Wall -Wextra)

if(FORCE_POSIX)
    target_compile_definitions(csnippets PRIVATE _POSIX_C_SOURCE=200809L)
else()
    target_compile_definitions(csnippets PRIVATE _GNU_SOURCE)
endif()
target_compile_definitions(csnippets PUBLIC MCACHE_STATS=0 SLOG_MT_SAFE=0)

add_subdirectory(algo)
add_subdirectory(math)
add_subdirectory(net)
add_subdirectory(utils)

include(CheckSymbolExists)
check_symbol_exists(syslog "syslog.h" HAVE_SYSLOG)
check_symbol_exists(localtime_r "time.h" HAVE_LOCALTIME_R)
check_symbol_exists(backtrace "execinfo.h" HAVE_BACKTRACE)
check_symbol_exists(backtrace_symbols "execinfo.h" HAVE_BACKTRACE_SYMBOLS)
check_symbol_exists(wcwidth "wchar.h" HAVE_WCWIDTH)

function(find_backtrace)
    find_path(LIBBACKTRACE_INCLUDE_DIR NAMES backtrace.h)
    find_library(LIBBACKTRACE_LIBRARY NAMES libbacktrace.a)
    if(EXISTS "${LIBBACKTRACE_INCLUDE_DIR}/backtrace-supported.h")
        file(STRINGS "${LIBBACKTRACE_INCLUDE_DIR}/backtrace-supported.h" BACKTRACE_SUPPORTED_STR REGEX "^#define BACKTRACE_SUPPORTED ([^\n]*)$")
    endif()
    if((${BACKTRACE_SUPPORTED_STR} MATCHES "#define BACKTRACE_SUPPORTED 1") AND (EXISTS ${LIBBACKTRACE_LIBRARY}))
        message(STATUS "libbacktrace: ${LIBBACKTRACE_LIBRARY}")
        set(WITH_LIBBACKTRACE TRUE PARENT_SCOPE)
        return()
    endif()
    if(NOT BUILD_STATIC AND NOT LINK_STATIC_LIBS)
        find_path(LIBUNWIND_INCLUDE_DIR NAMES libunwind.h)
        find_library(LIBUNWIND_LIBRARY NAMES unwind)
        find_library(LIBLZMA_LIBRARY NAMES lzma)
        if((EXISTS ${LIBUNWIND_INCLUDE_DIR}) AND (EXISTS ${LIBUNWIND_LIBRARY}) AND (EXISTS ${LIBLZMA_LIBRARY}))
            message(STATUS "libunwind: ${LIBUNWIND_LIBRARY}")
            message(STATUS "liblzma: ${LIBLZMA_LIBRARY}")
            set(LIBUNWIND_LIBRARY "${LIBUNWIND_LIBRARY};${LIBLZMA_LIBRARY}")
            set(WITH_LIBUNWIND TRUE PARENT_SCOPE)
            return()
        endif()
    endif()
endfunction(find_backtrace)

if(CMAKE_BUILD_TYPE STREQUAL "Debug" OR CMAKE_BUILD_TYPE STREQUAL "RelWithDebInfo")
    find_backtrace()
    if(WITH_LIBBACKTRACE)
        target_include_directories(csnippets SYSTEM PRIVATE ${LIBBACKTRACE_INCLUDE_DIR})
        target_link_libraries(csnippets PRIVATE ${LIBBACKTRACE_LIBRARY})
    elseif(WITH_LIBUNWIND)
        target_include_directories(csnippets SYSTEM PRIVATE ${LIBUNWIND_INCLUDE_DIR})
        target_link_libraries(csnippets PRIVATE ${LIBUNWIND_LIBRARY})
    endif()
endif()

configure_file(config.h.in config.h ESCAPE_QUOTES)
